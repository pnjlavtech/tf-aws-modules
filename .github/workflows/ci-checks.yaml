name: "Pre-Merge Checks for Terraform & Commits"

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write  
  checks: write
  id-token: write # Required for OIDC authentication
  # (Other minimal permissions as needed)



jobs:
  tf_checks:
    name: "Terraform Format, Lint, and Validate"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.2'

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: 'v0.55.1'

      - name: Run TFLint
        run: tflint -f json

  commit_message_check:
    name: "Conventional Commit Message Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Commitizen and Commitlint
        run: |
          npm install -g commitizen @commitlint/cli @commitlint/config-conventional
          cat <<EOF > commitlint.config.js
          module.exports = {
            extends: ['@commitlint/config-conventional'],
          };
          EOF

      - name: Validate Commit Messages
        run: |
          # Get commit messages from HEAD compared to main
          echo "Checking commit messages on PR..."
          git fetch origin main
          COMMIT_MESSAGES=$(git log origin/main..HEAD --pretty=format:"%s")
          echo "$COMMIT_MESSAGES" > commit-messages.txt
          # Check commit messages with commitlint; adjust the range if necessary.
          commitlint --from=origin/main --verbose

  versioning:
    name: "Bump Version, Create Tag & Generate Changelog"
    needs: [tf_checks, commit_message_check]
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@main

      - name: Get Module Name
        run: |

      - name: Prepare Initial Tag if Needed
        run: |        
          if [[ "$GITHUB_REF" == "refs/pull/"* ]]; then
            module_name="${GITHUB_HEAD_REF}"
          else
            module_name="${GITHUB_REF#refs/heads/}"
          fi
          echo "Module name is: $module_name"

          # Set the remote URL to include the token for authentication
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/pnjlavtech/tf-aws-modules.git

          # Fetch all tags from the remote repository
          git fetch --tags

          # Check if there are any existing tags
          if [ -z "$(git tag)" ]; then
            echo "No tags found, creating initial tag v0.0.0"
            if [ -n "$module_name" ]; then
              TAG_NAME="v0.0.0--${module_name}"
              echo $TAG_NAME
            else
              TAG_NAME="v0.0.0"
              echo $TAG_NAME
            fi
            echo "Using tag: $TAG_NAME"
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          else
            echo "Existing tags found:"
            git tag
            # Check if the specific tag already exists
            if git rev-parse "v0.0.0--${module_name}" >/dev/null 2>&1; then
              echo "Tag v0.0.0--${module_name} already exists, not creating a new tag."
            else
              echo "Creating new tag v0.0.0--${module_name}"
              git tag "v0.0.0--${module_name}"
              git push origin "v0.0.0--${module_name}"
            fi
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Commitizen Tools and Standard Version
        run: npm install -g commitizen standard-version

      - name: Bump Version with Commitizen
        id: bump
        run: |
          # Use standard-version to bump the version according to conventional commits.
          standard-version --no-verify
          # Capture the latest tag as the new version.
          NEW_VERSION=$(git describe --tags --abbrev=0)
          echo "New version is ${NEW_VERSION}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Generate Changelog Message
        id: changelog
        run: |
          # Use standard-version in dry-run mode to generate changelog output.
          CHANGELOG=$(npx conventional-changelog -p angular --infile=CHANGELOG.md --lerna-package ${module_name} --skip-commit)
          echo "Generated changelog:"
          echo "${CHANGELOG}"
          # Set the changelog as an output. (Using $GITHUB_OUTPUT as recommended)
          echo "changelog=${CHANGELOG}" >> $GITHUB_OUTPUT

      - name: Tag Repository with New Version
        run: |
          NEW_VERSION=${{ steps.bump.outputs.new_version }}
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
  


